{"version":3,"sources":["meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Tasks","Meteor","watch","require","v","Mongo","check","Collection","isServer","publish","tasksPublication","find","$or","private","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","user","taskId","task","findOne","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // Only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function tasksPublication() {\r\n        return Tasks.find({\r\n            $or: [{\r\n                private: {\r\n                    $ne: true\r\n                }\r\n            }, {\r\n                owner: this.userId\r\n            }, ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert' (text) {\r\n        check(text, String);\r\n\r\n        // Make sure the user is logged in before inserting a task\r\n        if (!Meteor.userId()) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: Meteor.userId(),\r\n            username: Meteor.user().username,\r\n        });\r\n    },\r\n    'tasks.remove' (taskId) {\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== Meteor.userId()) {\r\n            // If the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n    'tasks.setChecked' (taskId, setChecked) {\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== Meteor.userId()) {\r\n            // If the task is private, make sure only the owner can check it off\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, {\r\n            $set: {\r\n                checked: setChecked\r\n            }\r\n        });\r\n    },\r\n    'tasks.setPrivate' (taskId, setToPrivate) {\r\n        check(taskId, String);\r\n        check(setToPrivate, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        // Make sure only the task owner can make a task private\r\n        if (task.owner !== Meteor.userId()) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, {\r\n            $set: {\r\n                private: setToPrivate\r\n            }\r\n        });\r\n    },\r\n});","import '../imports/api/tasks.js';"]}