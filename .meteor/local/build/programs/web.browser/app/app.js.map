{"version":3,"sources":["meteor://ðŸ’»app/imports/components/todosList/todosList.js","meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/imports/startup/accounts-config.js","meteor://ðŸ’»app/client/main.js"],"names":["module1","module","angular","watch","require","v","angularMeteor","Meteor","Tasks","template","TodosListCtrl","$scope","viewModel","subscribe","hideCompleted","helpers","tasks","selector","getReactively","checked","$ne","find","sort","createdAt","incompleteCount","count","currentUser","user","addTask","newTask","call","setChecked","task","_id","removeTask","setPrivate","private","exportDefault","component","templateUrl","controller","export","Mongo","check","Collection","isServer","publish","tasksPublication","$or","owner","userId","methods","text","String","Error","insert","Date","username","taskId","findOne","remove","Boolean","update","$set","setToPrivate","Accounts","ui","config","passwordSignupFields","todosList","name"],"mappings":"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","file":"/app.js","sourcesContent":["import angular from 'angular';\r\nimport angularMeteor from 'angular-meteor';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { Tasks } from '../../api/tasks.js';\r\n\r\nimport template from './todosList.html';\r\n\r\nclass TodosListCtrl {\r\n    constructor($scope) {\r\n        $scope.viewModel(this);\r\n\r\n        this.subscribe('tasks');\r\n\r\n        this.hideCompleted = false;\r\n\r\n        this.helpers({\r\n            tasks() {\r\n                const selector = {};\r\n\r\n                // If hide completed is checked, filter tasks\r\n                if (this.getReactively('hideCompleted')) {\r\n                    selector.checked = {\r\n                        $ne: true\r\n                    };\r\n                }\r\n\r\n                // Show newest tasks at the top\r\n                return Tasks.find(selector, {\r\n                    sort: {\r\n                        createdAt: -1\r\n                    }\r\n                });\r\n            },\r\n            incompleteCount() {\r\n                return Tasks.find({\r\n                    checked: {\r\n                        $ne: true\r\n                    }\r\n                }).count();\r\n            },\r\n            currentUser() {\r\n                return Meteor.user();\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    addTask(newTask) {\r\n        // Insert a task into the collection\r\n        Meteor.call('tasks.insert', newTask);\r\n\r\n        // Clear form\r\n        this.newTask = '';\r\n    }\r\n\r\n    setChecked(task) {\r\n        // Set the checked property to the opposite of its current value\r\n        Meteor.call('tasks.setChecked', task._id, !task.checked);\r\n    }\r\n\r\n\r\n    removeTask(task) {\r\n        Meteor.call('tasks.remove', task._id);\r\n    }\r\n\r\n    setPrivate(task) {\r\n        Meteor.call('tasks.setPrivate', task._id, !task.private);\r\n    }\r\n}\r\n\r\nexport default angular.module('todosList', [\r\n    angularMeteor\r\n])\r\n    .component('todosList', {\r\n        templateUrl: 'imports/components/todosList/todosList.html',\r\n        controller: ['$scope', TodosListCtrl]\r\n    });","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // Only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function tasksPublication() {\r\n        return Tasks.find({\r\n            $or: [{\r\n                private: {\r\n                    $ne: true\r\n                }\r\n            }, {\r\n                owner: this.userId\r\n            }, ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert' (text) {\r\n        check(text, String);\r\n\r\n        // Make sure the user is logged in before inserting a task\r\n        if (!Meteor.userId()) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: Meteor.userId(),\r\n            username: Meteor.user().username,\r\n        });\r\n    },\r\n    'tasks.remove' (taskId) {\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== Meteor.userId()) {\r\n            // If the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n    'tasks.setChecked' (taskId, setChecked) {\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== Meteor.userId()) {\r\n            // If the task is private, make sure only the owner can check it off\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, {\r\n            $set: {\r\n                checked: setChecked\r\n            }\r\n        });\r\n    },\r\n    'tasks.setPrivate' (taskId, setToPrivate) {\r\n        check(taskId, String);\r\n        check(setToPrivate, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        // Make sure only the task owner can make a task private\r\n        if (task.owner !== Meteor.userId()) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, {\r\n            $set: {\r\n                private: setToPrivate\r\n            }\r\n        });\r\n    },\r\n});","import { Accounts } from 'meteor/accounts-base';\r\n\r\nAccounts.ui.config({\r\n    passwordSignupFields: 'USERNAME_ONLY',\r\n});","import angular from 'angular';\nimport angularMeteor from 'angular-meteor';\nimport todosList from '../imports/components/todosList/todosList';\nimport '../imports/startup/accounts-config.js';\n\nangular.module('simple-todos', [\n    angularMeteor,\n    todosList.name,\n    'accounts.ui'\n]);"]}