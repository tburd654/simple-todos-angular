{"version":3,"sources":["meteor://ðŸ’»app/packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":["module1","module","export","checkNpmVersions","semver","watch","require","v","_","packageIsInstalled","name","range","installedVersion","version","satisfies","e","packages","failures","forEach","push","length","error","map","n","join","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,UAAQC,MAAd;AAAqBD,QAAQE,MAAR,CAAe;AAACC,oBAAiB;AAAA,WAAIA,gBAAJ;AAAA;AAAlB,CAAf;AAAwD,IAAIC,MAAJ;AAAWJ,QAAQK,KAAR,CAAcC,QAAQ,QAAR,CAAd,EAAgC;AAAA,uBAASC,CAAT,EAAW;AAACH,aAAOG,CAAP;AAAS;AAArB,CAAhC,EAAuD,CAAvD;;AAA0D,IAAIC,CAAJ;;AAAMR,QAAQK,KAAR,CAAcC,QAAQ,mBAAR,CAAd,EAA2C;AAACE,GAAD,YAAGD,CAAH,EAAK;AAACC,QAAED,CAAF;AAAI;AAAV,CAA3C,EAAuD,CAAvD;;AAGxJ,IAAME,qBAAqB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1C,MAAI;AACF,QAAMC,mBAAmBN,QAAWI,IAAX,oBAAgCG,OAAzD;;AACA,WAAOT,OAAOU,SAAP,CAAiBF,gBAAjB,EAAmCD,KAAnC,CAAP;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACV;AACA,WAAO,KAAP;AACD;AACF,CARD;;AAUO,IAAMZ,mBAAmB,UAACa,QAAD,EAAc;AAC5C,MAAMC,WAAW,EAAjB;;AACAT,IAAEU,OAAF,CAAUF,QAAV,EAAoB,UAACL,KAAD,EAAQD,IAAR,EAAiB;AACnC,QAAI,CAACD,mBAAmBC,IAAnB,EAAyBC,KAAzB,CAAL,EAAsC;AACpCM,eAASE,IAAT,CAAcT,IAAd;AACD;AACF,GAJD;;AAMA,MAAIO,SAASG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,IAAP;AACD;;AAEDH,WAASC,OAAT,CAAiB,gBAAQ;AACvB,QAAMG,QAAQJ,SAASK,GAAT,CAAa;AAAA,aAAQC,CAAR,SAAaP,SAASO,CAAT,CAAb;AAAA,KAAb,EAAwDC,IAAxD,CAA6D,IAA7D,CAAd;AACA,UAAM,IAAIC,KAAJ,CAAUJ,KAAV,CAAN;AACD,GAHD;AAID,CAhBM,C","file":"/packages/tmeasday_check-npm-versions.js","sourcesContent":["import semver from 'semver';\nimport {_} from 'meteor/underscore';\n\nconst packageIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    return semver.satisfies(installedVersion, range);\n  } catch (e) {\n    // XXX I guess the only error here is that the module doesn't exist?\n    return false;\n  }\n};\n\nexport const checkNpmVersions = (packages) => {\n  const failures = [];\n  _.forEach(packages, (range, name) => {\n    if (!packageIsInstalled(name, range)) {\n      failures.push(name);\n    }\n  });\n\n  if (failures.length === 0) {\n    return true;\n  }\n\n  failures.forEach(name => {\n    const error = failures.map(n => `${n}@${packages[n]} not installed.`).join('\\n');\n    throw new Error(error);\n  });\n};\n"]}