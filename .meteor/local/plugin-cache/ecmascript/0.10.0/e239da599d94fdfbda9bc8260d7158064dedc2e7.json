{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$10","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/tasks.js","filename":"imports/api/tasks.js","sourceMapTarget":"imports/api/tasks.js.map","sourceMaps":true,"presets":[],"passPerPreset":false,"envName":"development","cwd":"D:\\Users\\tburd2\\AppData\\Local\\.meteor\\simple-todos","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/tasks.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","classProperties","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/tasks.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/tasks.js.map","sourceFileName":"imports/api/tasks.js"}},"code":"module.export({\n  Tasks: () => Tasks\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [{\n        private: {\n          $ne: true\n        }\n      }, {\n        owner: this.userId\n      }]\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String); // Make sure the user is logged in before inserting a task\n\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username\n    });\n  },\n\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n    const task = Tasks.findOne(taskId);\n\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n    Tasks.update(taskId, {\n      $set: {\n        checked: setChecked\n      }\n    });\n  },\n\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n    const task = Tasks.findOne(taskId); // Make sure only the task owner can make a task private\n\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: {\n        private: setToPrivate\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["imports/api/tasks.js"],"names":["module","export","Tasks","Meteor","watch","require","v","Mongo","check","Collection","isServer","publish","tasksPublication","find","$or","private","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","user","taskId","task","findOne","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM,MAAIA;AAAX,CAAd;AAAiC,IAAIC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,KAAJ;AAAUP,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIE,KAAJ;AAAUR,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,QAAMF,CAAN,EAAQ;AAACE,YAAMF,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAIpL,MAAMJ,QAAQ,IAAIK,MAAME,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAIN,OAAOO,QAAX,EAAqB;AACjB;AACA;AACAP,SAAOQ,OAAP,CAAe,OAAf,EAAwB,SAASC,gBAAT,GAA4B;AAChD,WAAOV,MAAMW,IAAN,CAAW;AACdC,WAAK,CAAC;AACFC,iBAAS;AACLC,eAAK;AADA;AADP,OAAD,EAIF;AACCC,eAAO,KAAKC;AADb,OAJE;AADS,KAAX,CAAP;AASH,GAVD;AAWH;;AAEDf,OAAOgB,OAAP,CAAe;AACX,iBAAgBC,IAAhB,EAAsB;AAClBZ,UAAMY,IAAN,EAAYC,MAAZ,EADkB,CAGlB;;AACA,QAAI,CAAClB,OAAOe,MAAP,EAAL,EAAsB;AAClB,YAAM,IAAIf,OAAOmB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDpB,UAAMqB,MAAN,CAAa;AACTH,UADS;AAETI,iBAAW,IAAIC,IAAJ,EAFF;AAGTR,aAAOd,OAAOe,MAAP,EAHE;AAITQ,gBAAUvB,OAAOwB,IAAP,GAAcD;AAJf,KAAb;AAMH,GAfU;;AAgBX,iBAAgBE,MAAhB,EAAwB;AACpBpB,UAAMoB,MAAN,EAAcP,MAAd;AAEA,UAAMQ,OAAO3B,MAAM4B,OAAN,CAAcF,MAAd,CAAb;;AACA,QAAIC,KAAKd,OAAL,IAAgBc,KAAKZ,KAAL,KAAed,OAAOe,MAAP,EAAnC,EAAoD;AAChD;AACA,YAAM,IAAIf,OAAOmB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDpB,UAAM6B,MAAN,CAAaH,MAAb;AACH,GA1BU;;AA2BX,qBAAoBA,MAApB,EAA4BI,UAA5B,EAAwC;AACpCxB,UAAMoB,MAAN,EAAcP,MAAd;AACAb,UAAMwB,UAAN,EAAkBC,OAAlB;AAEA/B,UAAMgC,MAAN,CAAaN,MAAb,EAAqB;AACjBO,YAAM;AACFC,iBAASJ;AADP;AADW,KAArB;AAKH,GApCU;;AAqCX,qBAAoBJ,MAApB,EAA4BS,YAA5B,EAA0C;AACtC7B,UAAMoB,MAAN,EAAcP,MAAd;AACAb,UAAM6B,YAAN,EAAoBJ,OAApB;AAEA,UAAMJ,OAAO3B,MAAM4B,OAAN,CAAcF,MAAd,CAAb,CAJsC,CAMtC;;AACA,QAAIC,KAAKZ,KAAL,KAAed,OAAOe,MAAP,EAAnB,EAAoC;AAChC,YAAM,IAAIf,OAAOmB,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAEDpB,UAAMgC,MAAN,CAAaN,MAAb,EAAqB;AACjBO,YAAM;AACFpB,iBAASsB;AADP;AADW,KAArB;AAKH;;AArDU,CAAf","file":"imports/api/tasks.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // Only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function tasksPublication() {\r\n        return Tasks.find({\r\n            $or: [{\r\n                private: {\r\n                    $ne: true\r\n                }\r\n            }, {\r\n                owner: this.userId\r\n            }, ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert' (text) {\r\n        check(text, String);\r\n\r\n        // Make sure the user is logged in before inserting a task\r\n        if (!Meteor.userId()) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: Meteor.userId(),\r\n            username: Meteor.user().username,\r\n        });\r\n    },\r\n    'tasks.remove' (taskId) {\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== Meteor.userId()) {\r\n            // If the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n    'tasks.setChecked' (taskId, setChecked) {\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        Tasks.update(taskId, {\r\n            $set: {\r\n                checked: setChecked\r\n            }\r\n        });\r\n    },\r\n    'tasks.setPrivate' (taskId, setToPrivate) {\r\n        check(taskId, String);\r\n        check(setToPrivate, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n\r\n        // Make sure only the task owner can make a task private\r\n        if (task.owner !== Meteor.userId()) {\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, {\r\n            $set: {\r\n                private: setToPrivate\r\n            }\r\n        });\r\n    },\r\n});"]},"hash":"e239da599d94fdfbda9bc8260d7158064dedc2e7"}
